// Mocks generated by Mockito 5.4.2 from annotations
// in tarefas/test/lista_tarefas_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:ui' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:tarefas/models/tarefa.dart' as _i3;
import 'package:tarefas/tarefaProvider.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [TarefasProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockTarefasProvider extends _i1.Mock implements _i2.TarefasProvider {
  MockTarefasProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i3.Tarefa> get tarefas => (super.noSuchMethod(
        Invocation.getter(#tarefas),
        returnValue: <_i3.Tarefa>[],
      ) as List<_i3.Tarefa>);

  @override
  set tarefas(List<_i3.Tarefa>? value) => super.noSuchMethod(
        Invocation.setter(
          #tarefas,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  void addListener(_i4.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i4.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
